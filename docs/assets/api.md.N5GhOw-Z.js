import{_ as s,c as i,a0 as t,o as e}from"./chunks/framework.awZV9pzJ.js";const c=JSON.parse('{"title":"Api","description":"","frontmatter":{},"headers":[],"relativePath":"api.md","filePath":"api.md"}'),n={name:"api.md"};function l(h,a,r,p,k,o){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="api" tabindex="-1">Api <a class="header-anchor" href="#api" aria-label="Permalink to &quot;Api&quot;">​</a></h1><h2 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h2><h3 id="init" tabindex="-1">init() <a class="header-anchor" href="#init" aria-label="Permalink to &quot;init()&quot;">​</a></h3><ul><li>初始化录音功能</li><li>请求麦克风权限，并设置音频处理节点（AudioWorkletNode 或 ScriptProcessorNode）。</li></ul><h3 id="getstatus-keyof-typeof-recorderstatus" tabindex="-1">getStatus() : keyof typeof RecorderStatus <a class="header-anchor" href="#getstatus-keyof-typeof-recorderstatus" aria-label="Permalink to &quot;getStatus() : keyof typeof RecorderStatus&quot;">​</a></h3><p>获取当前录音状态</p><p>返回值：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RecorderStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  INACTIVE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;inactive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未激活/已停止</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  RECORDING</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;recording&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 录音中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  PAUSED</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;paused&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 已暂停</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="start" tabindex="-1">start() <a class="header-anchor" href="#start" aria-label="Permalink to &quot;start()&quot;">​</a></h3><p>开始录音 如果当前状态不是录音中，则清空已有的音频数据，设置状态为录音中，并开始录音。</p><h3 id="pause" tabindex="-1">pause() <a class="header-anchor" href="#pause" aria-label="Permalink to &quot;pause()&quot;">​</a></h3><p>暂停录音 如果当前状态是录音中，则设置状态为暂停，并暂停录音。</p><h3 id="resume" tabindex="-1">resume() <a class="header-anchor" href="#resume" aria-label="Permalink to &quot;resume()&quot;">​</a></h3><p>恢复录音 如果当前状态是暂停，则设置状态为录音中，并恢复录音。</p><h3 id="stop" tabindex="-1">stop() <a class="header-anchor" href="#stop" aria-label="Permalink to &quot;stop()&quot;">​</a></h3><p>停止录音 设置状态为非活动状态，停止所有音频轨道，断开音频节点连接，关闭音频上下文。</p><h3 id="setpcmdatacallback" tabindex="-1">setPCMDataCallback() <a class="header-anchor" href="#setpcmdatacallback" aria-label="Permalink to &quot;setPCMDataCallback()&quot;">​</a></h3><p>设置实时 PCM 数据的回调函数。 当有新的 PCM 数据时，会调用该函数传入的回调函数。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">recorder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setPCMDataCallback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pcmData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Float32Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pcmData:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pcmData);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="exportpcm-uint8array-int16array" tabindex="-1">exportPCM() : Uint8Array | Int16Array <a class="header-anchor" href="#exportpcm-uint8array-int16array" aria-label="Permalink to &quot;exportPCM() : Uint8Array | Int16Array&quot;">​</a></h3><p>导出 PCM 数据,如果是双声道数据采用 L1 R1 L2 R2 的格式</p><p>根据采样位数转换返回的数据格式不同，如果传入的8位返回 <code>Uint8Array</code> 如果传入的16位返回 int16Array\`</p><h3 id="exportwav-blob" tabindex="-1">exportWAV() : Blob <a class="header-anchor" href="#exportwav-blob" aria-label="Permalink to &quot;exportWAV() : Blob&quot;">​</a></h3><p>导出 WAV 格式音频文件。</p><h2 id="静态方法" tabindex="-1">静态方法 <a class="header-anchor" href="#静态方法" aria-label="Permalink to &quot;静态方法&quot;">​</a></h2>`,25)]))}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
